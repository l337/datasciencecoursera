DT <- write.table(temp)
temp <- fread("./data/newidahohousing.csv")
DT <- data.table(temp)
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
system.time(mean(DT$pwgtp15,by=DT$SEX))
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
system.time(DT[,mean(pwgtp15),by=SEX])
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
system.time(rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2])
system.time(rowMeans(DT)[DT$SEX==1]])
system.time(rowMeans(DT)[DT$SEX==1])
temp <- fread("./data/newidahohousing.csv")
DT <- data.table(temp)
system.time(rowMeans(DT)[DT$SEX==1])
system.time(rowMeans(DT)[DT$SEX==2])
library(data.table)
fileCsvURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
download.file(fileCsvURL, destfile="./data/newidahohousing.csv", method="curl")
temp <- fread("./data/newidahohousing.csv")
DT <- data.table(temp)
# Different ways to calculate the average value
system.time(mean(DT[DT$SEX==1,]$pwgtp15))
system.time(mean(DT$pwgtp15,by=DT$SEX))
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
system.time(DT[,mean(pwgtp15),by=SEX])
system.time(rowMeans(DT)[DT$SEX==1])
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
# END Question Five
system.time(mean(DT$pwgtp15,by=DT$SEX))
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
system.time(DT[,mean(pwgtp15),by=SEX])
system.time(rowMeans(DT)[DT$SEX==1])
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
system.time(mean(DT[DT$SEX==1,]$pwgtp15))
system.time(mean(DT$pwgtp15,by=DT$SEX))
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
system.time(DT[,mean(pwgtp15),by=SEX]) #***
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
library(data.table)
fileCsvURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
download.file(fileCsvURL, destfile="./data/newidahohousing.csv", method="curl")
temp <- fread("./data/newidahohousing.csv")
DT <- data.table(temp)
resultSample <- 1000
for (i in 1:resultSample) {
system.time(mean(DT[DT$SEX==1,]$pwgtp15))
}
for (i in 1:resultSample) {
system.time(mean(DT[DT$SEX==1,]$pwgtp15))
}
resultSample <- 100
for (i in 1:resultSample) {
system.time(mean(DT[DT$SEX==1,]$pwgtp15))
}
resultSample <- 100
for (i in 1:resultSample) {
test1 <- system.time(mean(DT[DT$SEX==1,]$pwgtp15))
}
test1
resultSample <- 100
for (i in 1:resultSample) {
test1 <- system.time(mean(DT[DT$SEX==1,]$pwgtp15))
test2 <- system.time(mean(DT$pwgtp15,by=DT$SEX))
}
test1
test2
resultSample <- 100
for (i in 1:resultSample) {
test1 <- system.time(mean(DT[DT$SEX==1,]$pwgtp15))
test2 <- system.time(mean(DT$pwgtp15,by=DT$SEX))
test3 <- system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
}
test1
test2
test3
resultSample <- 100
for (i in 1:resultSample) {
test1 <- system.time(mean(DT[DT$SEX==1,]$pwgtp15))
test2 <- system.time(mean(DT$pwgtp15,by=DT$SEX))
test3 <- system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
test4 <- system.time(DT[,mean(pwgtp15),by=SEX])
test5 <- system.time(tapply(DT$pwgtp15,DT$SEX,mean))
}
test1
test2
test3
test4
test5
resultSample <- 100
for (i in 1:resultSample) {
test1 <- system.time(mean(DT[DT$SEX==1,]$pwgtp15))
test2 <- system.time(mean(DT$pwgtp15,by=DT$SEX))
test3 <- system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
test4 <- system.time(DT[,mean(pwgtp15),by=SEX])
test5 <- system.time(tapply(DT$pwgtp15,DT$SEX,mean))
}
test1
test2
test3
test4
test5
temp <- fread("./data/newidahohousing.csv")
DT <- data.table(temp)
resultSample <- 100
for (i in 1:resultSample) {
test1 <- system.time(mean(DT[DT$SEX==1,]$pwgtp15))
test2 <- system.time(mean(DT$pwgtp15,by=DT$SEX))
test3 <- system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
test4 <- system.time(DT[,mean(pwgtp15),by=SEX])
test5 <- system.time(tapply(DT$pwgtp15,DT$SEX,mean))
}
test1
test2
test3
test4
test5
resultSample <- 1000
test1 <- system.time(replicate(resultSample, { mean(DT[DT$SEX==1,]$pwgtp15 })))
test1
test1 <- system.time(replicate(resultSample, { mean(DT[DT$SEX==1,]$pwgtp15) }))
test1
test2 <- system.time(replicate(resultSample, { mean(DT$pwgtp15,by=DT$SEX) }))
test2
test3 <- system.time(replicate(resultSample, { sapply(split(DT$pwgtp15,DT$SEX),mean) }))
test3
test4 <- system.time(replicate(resultSample, { DT[,mean(pwgtp15),by=SEX] }))
test4
resultSample <- 500
test1 <- system.time(replicate(resultSample, { mean(DT[DT$SEX==1,]$pwgtp15) }))
test1
test4 <- system.time(replicate(resultSample, { DT[,mean(pwgtp15),by=SEX] }))
test4
test4 <- system.time(replicate(resultSample, { DT[,mean(pwgtp15),by=SEX] }))
test4 <- system.time(replicate(resultSample, { mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15) }))
test4
test4 <- system.time(replicate(resultSample, { DT[,mean(pwgtp15),by=SEX] }))
test4
resultSample <- 500
test1 <- system.time(replicate(resultSample, { mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15) }))
test1
test2 <- system.time(replicate(resultSample, { mean(DT$pwgtp15,by=DT$SEX) }))
test2
test3 <- system.time(replicate(resultSample, { sapply(split(DT$pwgtp15,DT$SEX),mean) }))
test3
test4 <- system.time(replicate(resultSample, { DT[,mean(pwgtp15),by=SEX] }))
test4
test4 <- system.time(replicate(resultSample, { DT[,mean(DT$pwgtp15),by=DT$SEX] }))
test4
test4 <- system.time(replicate(resultSample, { DT[,mean(DT$pwgtp15),by=DT$SEX] }))
test4
test4 <- system.time(replicate(resultSample, { DT[,mean(pwgtp15),by=SEX] }))
test4
install.packages("RMySQL")
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
install.packages("httr")
install.packages("httr")
install.packages("httr")
install.packages("httr")
install.packages("httr")
install.packages("httr")
install.packages("httr")
install.packages("httr")
install.packages("httr")
install.packages("httr")
install.packages("httr")
install.packages("httr")
install.packages("httr")
install.packages("httpuv")
library(httr)
# hidden values, not visible for obvious reasons
apikey <- "060c3bac7d59cdd023cc"
secret <- "fa4811c2427b62b8e5fc66d6753d6dfa16efec20"
# required for github api use
github <- oauth_endpoints("github")
myapp <- oauth_app("github", key=apikey, secret=secret)
github_token <- oauth2.0_token(github, myapp)
library(httr)
# hidden values, not visible for obvious reasons
apikey <- "060c3bac7d59cdd023cc"
secret <- "fa4811c2427b62b8e5fc66d6753d6dfa16efec20"
# required for github api use
github <- oauth_endpoints("github")
myapp <- oauth_app("github", key=apikey, secret=secret)
github_token <- oauth2.0_token(github, myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
# stop_for_status(req)
# content(req)
fromJSON(toJSON(req))
library(httr)
# hidden values, not visible for obvious reasons
apikey <- "060c3bac7d59cdd023cc"
secret <- "fa4811c2427b62b8e5fc66d6753d6dfa16efec20"
# required for github api use
github <- oauth_endpoints("github")
myapp <- oauth_app("github", key=apikey, secret=secret)
github_token <- oauth2.0_token(github, myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
# stop_for_status(req)
content(req)
# fromJSON(toJSON(req))
fromJSON(toJSON(content(req)))
req
install.packages("jsonlite")
install.packages("jsonlite")
library(httr)
# hidden values, not visible for obvious reasons
apikey <- "060c3bac7d59cdd023cc"
secret <- "fa4811c2427b62b8e5fc66d6753d6dfa16efec20"
# required for github api use
github <- oauth_endpoints("github")
myapp <- oauth_app("github", key=apikey, secret=secret)
github_token <- oauth2.0_token(github, myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
# stop_for_status(req)
# content(req)
fromJSON(toJSON(req))
library(httr)
# hidden values, not visible for obvious reasons
apikey <- "060c3bac7d59cdd023cc"
secret <- "fa4811c2427b62b8e5fc66d6753d6dfa16efec20"
# required for github api use
github <- oauth_endpoints("github")
myapp <- oauth_app("github", key=apikey, secret=secret)
github_token <- oauth2.0_token(github, myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
# stop_for_status(req)
# content(req)
fromJSON(toJSON(req))
?fromJSON
install.packages("RJSONIO")
fromJSON(toJSON(req))
fromJSON(toJSON(req))
library(httr)
# hidden values, not visible for obvious reasons
apikey <- "060c3bac7d59cdd023cc"
secret <- "fa4811c2427b62b8e5fc66d6753d6dfa16efec20"
# required for github api use
github <- oauth_endpoints("github")
myapp <- oauth_app("github", key=apikey, secret=secret)
github_token <- oauth2.0_token(github, myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
# stop_for_status(req)
# content(req)
fromJSON(toJSON(req))
library(RJSONIO)
fromJSON(toJSON(req))
library(httr)
library(RJSONIO)
# hidden values, not visible for obvious reasons
apikey <- "060c3bac7d59cdd023cc"
secret <- "fa4811c2427b62b8e5fc66d6753d6dfa16efec20"
# required for github api use
github <- oauth_endpoints("github")
myapp <- oauth_app("github", key=apikey, secret=secret)
github_token <- oauth2.0_token(github, myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
# stop_for_status(req)
# content(req)
fromJSON(toJSON(req))
library(jsonlite)
fromJSON(toJSON(req))
library(httr)
library(jsonlite)
# hidden values, not visible for obvious reasons
apikey <- "060c3bac7d59cdd023cc"
secret <- "fa4811c2427b62b8e5fc66d6753d6dfa16efec20"
# required for github api use
github <- oauth_endpoints("github")
myapp <- oauth_app("github", key=apikey, secret=secret)
github_token <- oauth2.0_token(github, myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
# stop_for_status(req)
# content(req)
fromJSON(toJSON(req))
?fromJSON
?toJSON
fromJSON(toJSON(content(req)))
jsonObject <- fromJSON(toJSON(content(req)))
jsonObject$name
jsonObject
str(jsonObject)
dim(jsonObject)
jsonObject <- fromJSON(toJSON(content(req)))
jsonObject[1]
jsonObject <- fromJSON(toJSON(content(req)))
if(jsonObject$name == "datasharing") {
jsonObject$created_at
}
jsonObject$created_at
jsonObject[,name]
jsonObject[,jsonObject$name]
jsonObject[jsonObject$name]
jsonObject[jsonObject$name == "repoName"]
datashare <- jsonObject[jsonObject$name == "repoName"]
datashare
apply(jsonObject, jsonObject$name, jsonObject$created_at)
jsonObject <- fromJSON(toJSON(content(req)))
df <- data.frame(jsonObject, jsonObject$name, jsonObject$created_at)
jsonObject <- fromJSON(toJSON(content(req)))
df <- data.frame(jsonObject, jsonObject$name, jsonObject$created_at)
df
df <- data.frame(jsonObject$name, jsonObject$created_at)
df
df$name
df <- data.frame(jsonObject$name, jsonObject$created_at)
df[1]
df <- data.frame(name=jsonObject$name, jsonObject$created_at)
df$name
df <- data.frame(name=jsonObject$name, jsonObject$created_at)
df
df <- data.frame(name=jsonObject$name, jsonObject$created_at)
str(df)
df[name == "datasharing"]
df[df$name == "datasharing"]
jsonObject <- fromJSON(toJSON(content(req)))
jsonObject["datasharing"]
jsonObject <- fromJSON(toJSON(content(req)))
jsonObject["datasharing",]
jsonObject[,"datasharing"]
jsonObject["datasharing",name]
jsonObject["datasharing",jsonObject$name]
jsonObject <- fromJSON(toJSON(content(req)))
jsonObject[repoName,"created_at"]
jsonObject <- fromJSON(toJSON(content(req)))
str(jsonObject)
str(jsonObject$created_at)
data <- data.frame(jsonObject$name, jsonObject$created_at)
data
# Question one: using github api to retrieve repo json
data <- data.frame(jsonObject$name, jsonObject$created_at)
str(data)
data[repoName]
data[repoName,]
data$name
jsonObject$name
jsonObject[jsonObject$name == "datasharing"]
jsonObject[,jsonObject$name == "datasharing"]
jsonObject$name[repoName]
jsonObject$name[repoName]
jsonObject <- fromJSON(toJSON(content(req)))
jsonObject$name$created_at
jsonObject <- fromJSON(toJSON(content(req)))
name <- jsonObject$name
createdAt <- jsonObject$created_at
df <- data.frame(name, createdAt)
df
name <- jsonObject[jsonObject$name == repoName]
repoName <- "datasharing"
name <- jsonObject[jsonObject$name == repoName]
name <- jsonObject[jsonObject$name == repoName]
name
name <- jsonObject$name[repoName]
name
name <- jsonObject[jsonObject$name]
name
name <- jsonObject$name
name
name <- jsonObject$created_at
name
name <- jsonObject[5]
name
name <- jsonObject$name[5]
name
createdAt <- jsonObject$created_at[5]
createdAt
install.packages("sqldf")
fileCsvURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
download.file(fileCsvURL, destfile="./data/americancommunitysurvey", method="curl")
data <- read.csv("./data/idahohousing.csv")
data
acs <- read.csv("./data/idahohousing.csv")
acs
?RMySQL
install.packages("RMySQL")
?sqldf
install.packages("sqldf")
acs <- read.csv.sql("./data/idahohousing.csv")
acs <- read.csv.sql("./data/idahohousing.csv")
results <- sqldf("select pwgtp1 from acs where AGEP < 50")
results
library(sqldf)
fileCsvURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
download.file(fileCsvURL, destfile="./data/americancommunitysurvey", method="curl")
acs <- read.csv.sql("./data/idahohousing.csv")
results <- sqldf("select pwgtp1 from acs where AGEP < 50")
results
acs <- read.csv.sql("./data/idahohousing.csv")
results <- sqldf("select pwgtp1 from acs where AGEP < 50")
results
acs <- read.csv.sql("./data/idahohousing.csv")
str(acs)
names(acs)
fileCsvURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
download.file(fileCsvURL, destfile="./data/americancommunitysurvey", method="curl")
acs <- read.csv.sql("./data/americancommunitysurvey.csv")
fileCsvURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
download.file(fileCsvURL, destfile="./data/americancommunitysurvey.csv", method="curl")
acs <- read.csv.sql("./data/americancommunitysurvey.csv")
names(acs)
results <- sqldf("select pwgtp1 from acs where AGEP < 50")
results
results <- sqldf("select pwgtp1 from acs where AGEP < 50")
head(results, n=20)
unique(acs$AGEP)
sqldf("select unique AGEP from acs")
sqldf("select AGEP where unique from acs")
uniq <- sqldf("select AGEP where unique from acs")
uniq
unique(acs$AGEP)
uniq <- sqldf("select unique * from acs")
uniq
results <- sqldf("select pwgtp1 from acs where AGEP < 50")
uniq <- sqldf("select unique * from acs")
sqldf("select AGEP where unique from acs")
#unique(acs$AGEP)
sqldf("select AGEP where unique from acs")
acs <- read.csv.sql("./data/americancommunitysurvey.csv")
sqldf("select AGEP where unique from acs")
library(sqldf)
sqldf("select AGEP where unique from acs")
results <- sqldf("select AGEP where unique from acs")
sqldf("select AGEP where "unique" from acs")
sqldf("select AGEP where 'unique' from acs")
sqldf("select AGEP where `unique` from acs")
sqldf("select AGEP where unique from acs")
detach("package:RSQLite")
sqldf("select AGEP where 'unique' from acs")
sqldf("select AGEP where 'unique' 'from' acs")
sqldf("select AGEP where unique from acs")
sqldf("select AGEP where 'unique' from acs")
sqldf("select AGEP where unique from acs")
sqldf("select AGEP where x from acs", method='unique')
sqldf("select AGEP where x from acs", method="unique")
sqldf("select AGEP where UNIQUE from acs")
sqldf("select distinct AGEP from acs")
sqldf("select unique * from acs")
runique <- unique(acs$AGEP)
sqlunique <- sqldf("select unique AGEP from acs")
indentical(runique, sqlunique)
sqlunique <- sqldf("select unique AGEP from acs")
sqlunique
sqlunique <- sqldf("select unique.AGEP from acs")
sqlunique <- sqldf("select unique AGEP from acs", drv='SQLite')
runique <- unique(acs$AGEP)
sqlunique <- sqldf("select distinct AGEP from acs")
indentical(runique, sqlunique)
?indentical
runique <- unique(acs$AGEP)
sqlunique <- sqldf("select distinct AGEP from acs")
identical(runique, sqlunique)
con <- url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode <- readLines(con)
close(con)
htmlCode
?nchar
nchar(htmlCode)
nchar(htmlCode)[10]
# 5 element datasharing
c(nchar(htmlCode)[10], nchar(htmlCode)[20], nchar(htmlCode)[30], nchar(htmlCode)[100])
fileFixWidthURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
download.file(fileFixWidthURL, destfile="./data/fixedwitdhfile.for", method="curl")
fwf <- read.fwf(fileFixWidthURL)
?read.fwf
fwf <- read.fwf(fileFixWidthURL, 10)
fwf
fwf <- read.fwf(fileFixWidthURL, 10)
fileFixWidthURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
download.file(fileFixWidthURL, destfile="./data/fixedwitdhfile.for", method="curl")
fwf <- read.fwf(fileFixWidthURL, 10)
fwf <- read.fwf(fileFixWidthURL, widths=c(9, 8, 8, 8, 8))
fwf <- read.fwf('./data/fixedwitdhfile.for', widths=c(9, 8, 8, 8, 8))
fwf
fwf[,4]
fwf <- read.fwf('./data/fixedwitdhfile.for', widths=c(9, 8, 8, 8, 8), skip=2)
fwf[,4]
fwf <- read.fwf('./data/fixedwitdhfile.for', widths=c(9, 8, 8, 8, 8), skip=4)
fwf[,4]
fwf <- read.fwf('./data/fixedwitdhfile.for', widths=c(9, 8, 8, 8, 8), skip=3)
fwf[,4]
fwf <- read.fwf('./data/fixedwitdhfile.for', widths=c(9, 8, 8, 8, 8), skip=4)
sum(fwf[,4])
colSums(fwf[,4]
)
colSums(,fwf[,4])
fwf <- read.fwf('./data/fixedwitdhfile.for', widths=c(9, 8, 8, 8, 8), skip=4)
sum(fwf)
fwf <- read.fwf('./data/fixedwitdhfile.for', widths=c(9, 8, 8, 8, 8), skip=4)
fwf[,4]
data <- fwf[,4]
sum(data)
data <- as.Integer(fwf[,4])
sum(data)
createdAt <- jsonObject$created_at[5]
createdAt
library(httr)
library(jsonlite)
# hidden values, not visible for obvious reasons
apikey <- "<20 character length hidden key>"
secret <- "<40 character length hidden secret>"
# required for github api use
github <- oauth_endpoints("github")
myapp <- oauth_app("github", key=apikey, secret=secret)
github_token <- oauth2.0_token(github, myapp)
